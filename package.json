{
  "name": "phantom-fleet",
  "version": "0.7.5",
  "description": "Phantom Fleet: Optimize Docker images with dynamic proxy management.",
  "repository": {
    "type": "git",
    "url": "https://github.com/StekolschikovV/phantom-fleet.git"
  },
  "main": "./bin/index.js",
  "bin": {
    "phantom-fleet": "./bin/index.js",
    "phantom-fleet-demon": "./bin/background.js"
  },
  "scripts": {
    "start": "ts-node src/index.ts",
    "publish-and-build": "tsc && npm publish",
    "postinstall": "node ./bin/postinstall.js",
    "postuninstall": "node ./bin/postuninstall.js",
    "test-install-localy": "npm link",
    "test-uninstall-localy": "npm uninstall -g phantom-fleet",
    "test-reintall": "tsc && npm run test-uninstall-localy && npm run test-install-localy"
  },
  "author": "StekolschikovV",
  "license": "ISC",
  "dependencies": {
    "auto-launch": "^5.0.6",
    "child_process": "^1.0.2",
    "cors": "^2.8.5",
    "cross-spawn": "^7.0.3",
    "daemonize-process": "^3.0.0",
    "dockerode": "^3.3.5",
    "express": "^4.18.2",
    "http-proxy-middleware": "^2.0.6",
    "net": "^1.0.2",
    "portscanner": "^2.2.0",
    "puppeteer": "^20.9.0",
    "request": "^2.88.2"
  },
  "devDependencies": {
    "@types/auto-launch": "^5.0.2",
    "@types/cors": "^2.8.13",
    "@types/cross-spawn": "^6.0.2",
    "@types/dockerode": "^3.3.19",
    "@types/express": "^4.17.17",
    "@types/node": "^20.4.5",
    "@types/portscanner": "^2.1.1"
  },
  "keywords": [
    "Phantom Fleet",
    "Docker",
    "Dynamic Proxy",
    "Image Management",
    "Resource Optimization",
    "Container Management",
    "Docker Optimization",
    "Resource Savings",
    "Collaboration",
    "Efficiency",
    "Command-Line",
    "Node.js",
    "npm",
    "Configuration",
    "Open Source",
    "Container Proxy",
    "Container Scaling",
    "Resource Management",
    "Container Orchestration",
    "Dockerization",
    "Microservices",
    "DevOps",
    "Application Scaling",
    "Performance Optimization",
    "Load Balancing",
    "Application Deployment",
    "Cloud-Native",
    "Scalability",
    "Serverless",
    "Containerization",
    "Continuous Integration",
    "Continuous Deployment",
    "Infrastructure as Code",
    "Monitoring",
    "Automated Scaling",
    "Multi-Cloud",
    "Fault Tolerance",
    "High Availability",
    "Resource-Efficient",
    "Savings",
    "Optimized Workflows",
    "Server Management",
    "Application Performance",
    "System Efficiency",
    "Resource Allocation",
    "Inactivity Timeout",
    "Container Environment",
    "Automated Docker",
    "Network Traffic Control"
  ]
}
